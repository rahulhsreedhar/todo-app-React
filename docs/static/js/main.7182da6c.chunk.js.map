{"version":3,"sources":["ToDoList/AddNewTask.jsx","ToDoList/ShowCompletedTasks.jsx","ToDoList/ShowTasks.jsx","ToDoList/index.jsx","ToDoList/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["prioirities","key","text","AddNewTask","props","useState","showAddTask","setShowAddTask","popupOpen","setPopupOpen","taskName","setTaskName","priority","setPriority","Date","toJSON","slice","replace","date","setDate","time","setTime","details","setDetails","className","Dialog","open","onClose","aria-labelledby","maxWidth","fullWidth","onChange","event","target","value","DialogActions","onClick","type","placeholder","defaultValue","disabled","hidden","map","style","width","marginRight","margin","console","log","handleAddNewTask","ShowCompletedTasks","taskList","handleDeleteTask","handleRecover","length","task","index","Icon","marginLeft","name","color","data-tooltip","data-position","cursor","ShowTasks","handleCompleteTask","ToDoList","setTaskList","completedList","setCompletedList","taskData","tempTaskList","JSON","parse","stringify","splice","tempCompletedList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7182da6c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\r\n\r\nconst prioirities = [\r\n    { key: 1, text: 'Low' },\r\n    { key: 2, text: 'Normal' },\r\n    { key: 3, text: 'High' },\r\n];\r\n\r\nconst AddNewTask = (props) => {\r\n    const [showAddTask, setShowAddTask] = useState(false);\r\n    const [popupOpen, setPopupOpen] = useState(false);\r\n    const [taskName, setTaskName] = useState('');\r\n    const [priority, setPriority] = useState('Normal');\r\n    const [date, setDate] = useState(new Date().toJSON().slice(0, 10).replace(/-/g, '/'));\r\n    const [time, setTime] = useState('12:00');\r\n    const [details, setDetails] = useState('');\r\n\r\n    const handleAddTask = () => {\r\n        setShowAddTask(!showAddTask);\r\n    }\r\n\r\n    const handleCancelDetails = () => {\r\n        setDetails('');\r\n        setPopupOpen(false);\r\n    }\r\n    // const handleSubmitDetails = () => {\r\n\r\n    //     setPopUpOpen(false)\r\n    // }\r\n    const handleSubmitTask = () => {\r\n        console.log({ taskName, priority, date, time, details })\r\n        props.handleAddNewTask({ taskName, priority, date, time, details });\r\n        setTaskName('');\r\n        setPriority('Normal');\r\n        setDate(new Date().toJSON().slice(0, 10).replace(/-/g, '/'));\r\n        setTime('12:00');\r\n        setDetails('');\r\n        setShowAddTask(!showAddTask);\r\n    }\r\n    return (\r\n        <div className=\"section\"\r\n        >\r\n            <Dialog\r\n                open={popupOpen}\r\n                onClose={() => setPopupOpen(false)}\r\n                aria-labelledby=\"form-dialog-title\"\r\n                maxWidth=\"xs\"\r\n                fullWidth\r\n            >\r\n                <div className='popup-header'>Please add task details</div>\r\n                <textarea\r\n                    onChange={(event) => { setDetails(event.target.value) }}\r\n                    value={details}\r\n                    className='popup-text'\r\n                />\r\n                <DialogActions>\r\n                    <button className=\"ui red button small\" onClick={handleCancelDetails}>Cancel</button>\r\n                    <button className=\"ui green button small\" onClick={() => setPopupOpen(false)}>Submit</button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <button\r\n                className={showAddTask ? \"ui red button big\" : \"ui teal button big\"}\r\n                onClick={handleAddTask}\r\n            >\r\n                {\r\n                    showAddTask ? \"cancel\" : \"Add Task\"}</button>\r\n\r\n\r\n\r\n            {\r\n                showAddTask\r\n                    ? <div className=\"enter-task\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"task-input\"\r\n                            placeholder=\"Add your task\"\r\n                            value={taskName}\r\n                            onChange={(event) => setTaskName(event.target.value)}\r\n                        />\r\n                        <select\r\n                            defaultValue=''\r\n                            className='priority-dropdown'\r\n                            onChange={(event) => setPriority(event.target.value)}                        >\r\n                            <option value='' disabled hidden>Priority</option>\r\n                            {\r\n                                prioirities.map((priority) => {\r\n                                    return <option value={priority.text} key={priority.key} >{priority.text}</option>\r\n                                })\r\n                            }\r\n\r\n\r\n                        </select>\r\n                        <input type='date'\r\n                            className=\"task-date\"\r\n                            onChange={(event) => setDate(event.target.value)}\r\n\r\n                        ></input>\r\n                        <input\r\n                            type=\"time\"\r\n                            className='task-date'\r\n                            onChange={(event) => setTime(event.target.value)}\r\n                        />\r\n\r\n                        <button\r\n                            className=\"ui blue button small\"\r\n                            style={{ width: '10%', marginRight: '1%' }}\r\n                            onClick={() => setPopupOpen(true)}>Details</button>\r\n                        <button\r\n                            className=\"ui green button small\"\r\n                            style={{ width: '10%', margin: '0' }}\r\n                            onClick={handleSubmitTask}>Add</button>\r\n\r\n                    </div>\r\n                    : null\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default AddNewTask","import React from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst ShowCompletedTasks = (props) => {\r\n\r\n    const { taskList, handleDeleteTask, handleRecover } = props;\r\n    if (taskList.length === 0) {\r\n        return ('')\r\n    }\r\n    return (\r\n        <div className=\"section\">\r\n            <h3>Completed Tasks</h3>\r\n            {\r\n                taskList.map((task, index) => {\r\n                    return (\r\n                        <div key={index} className=\"row-container\">\r\n\r\n                            <button\r\n                                className=\"ui green button small\"\r\n                                style={{ width: '10%', marginRight: '1%' }}\r\n                                onClick={() => handleRecover(index)}\r\n                            >Recover</button>\r\n                            <div className='task-list-row' style={{ width: '30%', marginRight: '1%' }}>{task.taskName || 'No Name'}</div>\r\n                            <div className='task-list-row' style={{ width: '10%', marginRight: '1%' }}>{task.priority}</div>\r\n                            <div className='task-list-row' style={{ width: '20%', marginRight: '1%' }}>\r\n                                {task.date}\r\n                                <Icon className='large' style={{ marginLeft: '1em' }} name='calendar alternate outline' color='teal' />\r\n                            </div>\r\n                            <div className='task-list-row' style={{ width: '10%', marginRight: '1%' }}>\r\n                                {task.time}\r\n                                <Icon className='large' style={{ marginLeft: '0.5em' }} name='clock outline' color='teal' />\r\n                            </div>\r\n                            <button\r\n                                className=\"ui blue button small\"\r\n                                style={{ width: '10%', marginRight: '1%' }}\r\n                                data-tooltip={task.details || 'No Details Provided'}\r\n                                data-position=\"top right\"\r\n                            >\r\n                                Details\r\n\t\t\t\t\t\t\t</button>\r\n                            <Icon\r\n                                className='big'\r\n                                name='trash alternate'\r\n                                color='red'\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => handleDeleteTask(index)}\r\n                            />\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowCompletedTasks;","import React from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst ShowTasks = (props) => {\r\n    const { taskList, handleDeleteTask, handleCompleteTask } = props;\r\n    if (taskList.length === 0) {\r\n        return ('')\r\n    }\r\n    return (\r\n        <div className=\"section\"\r\n        >\r\n            <h3>Pending Tasks</h3>\r\n            {taskList.map((task, index) => {\r\n                return (\r\n                    <div key={index} className=\"row-container\">\r\n                        <button\r\n                            className=\"ui green button small\"\r\n                            style={{ width: '10%', marginRight: '1%' }}\r\n                            onClick={() => handleCompleteTask(index)}\r\n                        >Done</button>\r\n\r\n                        <div className='task-list-row' style={{ width: '30%', marginRight: '1%' }}>{task.taskName || 'No Name'}</div>\r\n                        <div className='task-list-row' style={{ width: '10%', marginRight: '1%' }}>{task.priority}</div>\r\n                        <div className='task-list-row' style={{ width: '20%', marginRight: '1%' }}>\r\n                            {task.date}\r\n                            <Icon className='large' style={{ marginLeft: '1em' }} name='calendar alternate outline' color='teal' />\r\n                        </div>\r\n                        <div className='task-list-row' style={{ width: '10%', marginRight: '1%' }}>\r\n                            {task.time}\r\n                            <Icon className='large' style={{ marginLeft: '0.5em' }} name='clock outline' color='teal' />\r\n                        </div>\r\n                        <button\r\n                            className=\"ui blue button small\"\r\n                            style={{ width: '10%', marginRight: '1%' }}\r\n                            data-tooltip={task.details || 'No Details Provided'}\r\n                            data-position=\"top right\"\r\n                        >\r\n                            Details\r\n\t\t\t\t\t\t\t</button>\r\n\r\n                        <Icon\r\n                            className='big'\r\n                            name='trash alternate'\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={() => handleDeleteTask(index)}\r\n                        />\r\n                    </div>)\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowTasks","import ToDoList from './ToDoList';\n\nexport default ToDoList;","import React, { useState } from 'react';\nimport AddNewTask from './AddNewTask';\nimport ShowCompletedTasks from './ShowCompletedTasks';\nimport ShowTasks from './ShowTasks';\nimport './styles/ToDoAppStyles.css';\nimport './styles/TaskLists.css'\n\nconst ToDoList = () => {\n\n\tconst [taskList, setTaskList] = useState([]);\n\tconst [completedList, setCompletedList] = useState([]);\n\n\tconst handleAddNewTask = (taskData) => {\n\t\tsetTaskList([...taskList, taskData])\n\n\t}\n\tconst handleCompleteTask = (index) => {\n\t\tconst tempTaskList = JSON.parse(JSON.stringify(taskList));\n\t\tconst tempCompletedList = JSON.parse(JSON.stringify(completedList));\n\n\t\ttempCompletedList.splice(0, 0, tempTaskList[index])\n\t\ttempTaskList.splice(index, 1);\n\t\tsetTaskList(tempTaskList)\n\t\tsetCompletedList(tempCompletedList)\n\n\n\t}\n\tconst handleDeleteTask = (index) => {\n\t\tlet tempTaskList = JSON.parse(JSON.stringify(taskList));\n\t\ttempTaskList.splice(index, 1);\n\t\tsetTaskList(tempTaskList);\n\t}\n\tconst handleDeleteCompletedTask = (index) => {\n\t\tlet tempCompletedList = JSON.parse(JSON.stringify(completedList));\n\t\ttempCompletedList.splice(index, 1);\n\t\tsetCompletedList(tempCompletedList);\n\t}\n\tconst handleRecover = (index) => {\n\t\tlet tempTaskList = JSON.parse(JSON.stringify(taskList));\n\t\tlet tempCompletedList = JSON.parse(JSON.stringify(completedList));\n\n\t\ttempTaskList.splice(0, 0, tempCompletedList[index]);\n\t\ttempCompletedList.splice(index, 1);\n\t\tsetTaskList(tempTaskList);\n\t\tsetCompletedList(tempCompletedList);\n\t}\n\treturn (\n\t\t<div className='main-body'>\n\t\t\t<div className=\"main-content\">\n\t\t\t\t<h1 className=\"center-text\">\tTo Do List  </h1>\n\t\t\t\t<AddNewTask handleAddNewTask={handleAddNewTask} />\n\t\t\t\t<ShowTasks\n\t\t\t\t\ttaskList={taskList}\n\t\t\t\t\thandleDeleteTask={handleDeleteTask}\n\t\t\t\t\thandleCompleteTask={handleCompleteTask}\n\t\t\t\t/>\n\t\t\t\t<ShowCompletedTasks\n\t\t\t\t\thandleDeleteTask={handleDeleteCompletedTask}\n\t\t\t\t\ttaskList={completedList}\n\t\t\t\t\thandleRecover={handleRecover}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div >\n\t);\n}\n\nexport default ToDoList;","import React from 'react';\nimport ToDoList from './ToDoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}